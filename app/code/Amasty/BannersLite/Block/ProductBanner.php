<?php
/**
* @author Amasty Team
* @copyright Copyright (c) 2022 Amasty (https://www.amasty.com)
* @package Banners Lite for Magento 2 (System)
*/

namespace Amasty\BannersLite\Block;

use Amasty\BannersLite\Api\Data\BannerInterface;
use Amasty\BannersLite\Model\ConfigProvider;
use Amasty\Base\Model\Serializer;
use Amasty\Promo\Model\RuleFactory;
use Magento\Catalog\Model\ProductRepository;
use Magento\Customer\Model\Context as CustomerContext;
use Magento\Framework\App\Http\Context;
use Magento\Framework\Registry;
use Magento\Framework\View\Element\Template;
use Amasty\BannersLite\Model\BannerRule;
use Amasty\BannersLite\Model\ResourceModel\BannerRule\Collection as BannerCollection;
use Magento\Catalog\Helper\Image;
use Magento\SalesRule\Model\ResourceModel\Rule\Collection as SaleRuleCollection;
use Magento\Framework\Pricing\Helper\Data;
use Amasty\Promo\Model\ResourceModel\Rule\Collection as RuleCollection;
use Magento\Framework\App\ResourceConnection;


/**
 * @method string getPosition()
 */
class ProductBanner extends Template
{

    /**
     * @var BannerRule
     */
    protected $banners;

    /**
     * @var Context
     */
    protected $httpContext;

    public function __construct(
        ResourceConnection $resourceConnection,
        SaleRuleCollection $saleruleCollection,
        BannerCollection $bannerCollection,
        RuleCollection $ruleCollection,
        Registry $registry,
        Template\Context $context,
        ProductRepository $product,
        BannerRule        $banners,
        RuleFactory              $rule,
        Data              $priceHelper,
        Image             $image,
        Serializer        $serializerBase,
        ConfigProvider    $configProvider,
        Context             $httpContext,
        array             $data = []
    ) {
        parent::__construct($context, $data);
        $this->resourceConnection = $resourceConnection;
        $this->saleruleCollection = $saleruleCollection;
        $this->bannerCollection = $bannerCollection;
        $this->ruleCollection = $ruleCollection;
        $this->product = $product;
        $this->registry = $registry;
        $this->rule = $rule;
        $this->priceHelper = $priceHelper;
        $this->image = $image;
        $this->banners = $banners;
        $this->serializerBase = $serializerBase;
        $this->configProvider = $configProvider;
        $this->httpContext = $httpContext;
    }

    public function toHtml()
    {
        return ($this->isDisplay() == 1) ? parent::toHtml() : ''; // TODO: Change the autogenerated stub
    }
    public function getStatus()
    {
        if ($this->getBannerProductItem()->getEntityId())
        {
            $salesrule_id = $this->getBannerProductItem()->getSalesRuleId();
            $item_discount = $this->rule->create()->load($salesrule_id,'salesrule_id')->getItemsDiscount();
            if ($item_discount){
                return 1;
            }
            else return 0;
        }
        return 0;
    }
    public function isDisplay()
    {
        return $this->getBannerProductItem()->getDisplay();
    }
    public function getFreeProductSkus(){
        if ($this->getBannerProductItem()->getEntityId())
        {
            $salesrule_id = $this->getBannerProductItem()->getSalesRuleId();
            $skus = $this->rule->create()->load($salesrule_id,'salesrule_id')->getSku();
            return explode(',', $skus);
        }
        return [];
    }
    public function getBannerProductItem()
    {
        $mainProduct = $this->getCurrentProduct()->getId();
        $saleRule = $this->resourceConnection->getTableName('salesrule');
        $productSku = $this->product->getById($mainProduct)->getSku();
        $bannerCollection = $this->bannerCollection;
        $customer = $this->httpContext->getValue(CustomerContext::CONTEXT_GROUP);
        $bannerCollection->getSelect()
            ->join(
                [],
                'main_table.salesrule_id = amasty_ampromo_rule.salesrule_id',
                ''
            )
            ->joinLeft(
                $saleRule,
                'main_table.salesrule_id =' .$saleRule.'.rule_id',
                ['sort_order']
            )
            ->limit(1)->order('sort_order asc')
            ->where('main_table.show_banner_for = 1 AND salesrule.is_active=1 AND FIND_IN_SET("' . $productSku . '",main_table.banner_product_sku)
            AND FIND_IN_SET("' . $customer . '",main_table.customer_group_ids)' );
        return $bannerCollection->getFirstItem();
    }

    public function getProductBySku($sku)
    {
        return $this->product->get($sku);
    }

    public function getProductById($id)
    {
        return $this->product->getById($id)->getSku();
    }

    public function getProductName($sku)
    {
        $product = $this->getProductBySku($sku);
        return $product->getName();
    }

    public function getProductPrice($sku)
    {
        $product = $this->getProductBySku($sku);
        $price = $product->getPrice();
        return $this->priceHelper->currency($price, true, false);
    }
    public function getProductPriceAfter($sku)
    {
        $product = $this->getProductBySku($sku);
        $price = 0;
        if ($this->getStatus($sku) != 0 ){
            $rule_id = $this->getBannerProductItem()->getSalesRuleId();
            $discount = $this->rule->create()->load($rule_id,'salesrule_id')->getItemsDiscount();
            $regularPrice = $product->getPrice();
            if ($discount){
                $discountDetail = substr($discount,-1) ;
                if ($discountDetail == '%'){
                    $afterDiscount = substr($discount, 0,-1);
                    $price = $regularPrice *  (100 - (int)$afterDiscount) / 100;
                }
                else $price = $regularPrice - (float) $discount;
            }
        }
        return $this->priceHelper->currency($price, true, false);
    }
    public function getProductLink($sku)
    {
        $product = $this->getProductBySku($sku);
        return $product->getProductUrl();
    }
    public function getProductImg($sku)
    {
        $product = $this->getProductBySku($sku);
        $img_id = $product->getMediaGalleryImages()->getFirstItem()->getData('value_id');
        return $this->image->init($product, 'product_detail_free_gift')->getUrl();
    }
    public function getCurrentProduct()
    {
        return $this->registry->registry('current_product');
    }
}
