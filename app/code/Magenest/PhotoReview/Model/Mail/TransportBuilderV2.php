<?php
namespace Magenest\PhotoReview\Model\Mail;

use Magento\Framework\App\TemplateTypesInterface;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Exception\MailException;
use Magento\Framework\Mail\Exception\InvalidArgumentException;
use Magento\Framework\Mail\MessageInterface;
use Magento\Framework\Mail\MessageInterfaceFactory;
use Magento\Framework\Mail\MimeInterface;
use Magento\Framework\Mail\Template\FactoryInterface;
use Magento\Framework\Mail\Template\SenderResolverInterface;
use Magento\Framework\Mail\TransportInterfaceFactory;
use Magento\Framework\ObjectManagerInterface;
use Magento\Framework\Phrase;

class TransportBuilderV2 extends \Magento\Framework\Mail\Template\TransportBuilder
{
    protected $body;
    protected $subject;
    protected $from;
    protected $version;
    /**
     * Param that used for storing all message data until it will be used
     *
     * @var array
     */
    private $messageData = [];

    /**
     * @return MessageInterface
     */
    public function getMessage()
    {
        return $this->message;
    }

    /**
     * @return TransportBuilderV2|\Magento\Framework\Mail\Template\TransportBuilder
     * @throws LocalizedException
     */
    public function prepare()
    {
        return $this->prepareMessage();
    }

    /**
     * @return $this
     */
    public function clearFrom()
    {
        $this->message->clearFrom('From');
        return $this;
    }

    /**
     * @return $this
     */
    public function clearSubject()
    {
        $this->message->clearSubject();
        return $this;
    }

    /**
     * @return $this
     */
    public function clearMessageId()
    {
        $this->message->clearMessageId();
        return $this;
    }

    /**
     * @return $this
     */
    public function clearBody()
    {
        $this->message->setParts([]);
        return $this;
    }

    /**
     * @return $this
     */
    public function clearRecipients()
    {
        $this->message->clearRecipients();
        return $this;
    }

    /**
     * @param $headerName
     *
     * @return $this
     */
    public function clearHeader($headerName)
    {
        if (isset($this->_headers[$headerName])){
            unset($this->_headers[$headerName]);
        }
        return $this;
    }

    /**
     * @param $body
     * @param $subject
     * @param $from
     * @param $version
     */
    public function setMessageContent($body, $subject, $from, $version)
    {
        $this->body    = $body;
        $this->subject = $subject;
        $this->from    = $from;
        $this->version = $version;
    }

    /**
     * @return $this|\Magento\Framework\Mail\Template\TransportBuilder
     */
    protected function prepareMessage()
    {
        $emailMessageInterfaceFactory = $this->objectManager->get(\Magento\Framework\Mail\EmailMessageInterfaceFactory::class);
        $mimeMessageInterfaceFactory = $this->objectManager->get(\Magento\Framework\Mail\MimeMessageInterfaceFactory::class);
        $mimePartInterfaceFactory = $this->objectManager->get(\Magento\Framework\Mail\MimePartInterfaceFactory::class);
        $part['type'] = MimeInterface::TYPE_HTML;
        /** @var \Magento\Framework\Mail\MimePartInterface $mimePart */
        $mimePart = $mimePartInterfaceFactory->create(['content' => $this->body]);
        $this->messageData['encoding'] = $mimePart->getCharset();
        $this->messageData['body'] = $mimeMessageInterfaceFactory->create(
            ['parts' => [$mimePart]]
        );

        $this->messageData['subject'] = html_entity_decode(
            (string)$this->subject,
            ENT_QUOTES
        );

        $this->message = $emailMessageInterfaceFactory->create($this->messageData);

        return $this;

    }

    /**
     * @return \Magento\Framework\Mail\Template\TransportBuilder
     */
    public function reset()
    {
        return parent::reset(); // TODO: Change the autogenerated stub
    }
    /**
     * Handles possible incoming types of email (string or array)
     *
     * @param string $addressType
     * @param string|array $email
     * @param string|null $name
     *
     * @return void
     * @throws InvalidArgumentException
     */
    private function addAddressByType(string $addressType, $email, string $name = null): void
    {
        $addressConverter = $this->objectManager->get(\Magento\Framework\Mail\AddressConverter::class);
        if (is_string($email)) {
            $this->messageData[$addressType][] = $addressConverter->convert($email, $name);
            return;
        }
        $convertedAddressArray = $addressConverter->convertMany($email);
        if (isset($this->messageData[$addressType])) {
            $this->messageData[$addressType] = array_merge(
                $this->messageData[$addressType],
                $convertedAddressArray
            );
        } else {
            $this->messageData[$addressType] = $convertedAddressArray;
        }
    }
    /**
     * Add cc address
     *
     * @param array|string $address
     * @param string $name
     *
     * @return \Magento\Framework\Mail\Template\TransportBuilder
     */
    public function addCc($address, $name = '')
    {
        $this->addAddressByType('cc', $address, $name);

        return $this;
    }

    /**
     * Add to address
     *
     * @param array|string $address
     * @param string $name
     *
     * @return $this
     * @throws InvalidArgumentException
     */
    public function addTo($address, $name = '')
    {
        $this->addAddressByType('to', $address, $name);

        return $this;
    }

    /**
     * Add bcc address
     *
     * @param array|string $address
     *
     * @return $this
     * @throws InvalidArgumentException
     */
    public function addBcc($address)
    {
        $this->addAddressByType('bcc', $address);

        return $this;
    }

    /**
     * Set Reply-To Header
     *
     * @param string $email
     * @param string|null $name
     *
     * @return $this
     * @throws InvalidArgumentException
     */
    public function setReplyTo($email, $name = null)
    {
        $this->addAddressByType('replyTo', $email, $name);

        return $this;
    }

    /**
     * @param array|string $from
     *
     * @return \Magento\Framework\Mail\Template\TransportBuilder
     * @throws MailException
     */
    public function setFrom($from)
    {
        return $this->setFromByScope($from);
    }
    /**
     * Set mail from address by scopeId
     *
     * @param string|array $from
     * @param string|int $scopeId
     *
     * @return \Magento\Framework\Mail\Template\TransportBuilder
     * @throws InvalidArgumentException
     * @throws MailException
     * @since 102.0.1
     */
    public function setFromByScope($from, $scopeId = null)
    {
        $result = $this->_senderResolver->resolve($from, $scopeId);
        $this->addAddressByType('from', $result['email'], $result['name']);

        return $this;
    }
}